<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: PHP | Bill's Blog]]></title>
  <link href="http://ibillxia.github.io/blog/tags/php/atom.xml" rel="self"/>
  <link href="http://ibillxia.github.io/"/>
  <updated>2014-04-28T23:13:20+08:00</updated>
  <id>http://ibillxia.github.io/</id>
  <author>
    <name><![CDATA[Bill Xia]]></name>
    <email><![CDATA[ibillxia@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP字符串安全过滤全攻略]]></title>
    <link href="http://ibillxia.github.io/blog/2010/09/24/PHP-string-filter-methods-for-safety/"/>
    <updated>2010-09-24T13:28:00+08:00</updated>
    <id>http://ibillxia.github.io/blog/2010/09/24/PHP-string-filter-methods-for-safety</id>
    <content type="html"><![CDATA[<p>php安全过滤是防止注入的第一道防线，不得大意。提到PHP的安全过滤，不得不提的两个东西是set_magic_quotes_runtime 和 magic_quotes_gpc。</p>




<p>set_magic_quotes_runtime() 可以让程序员在代码中动态开启或关闭 magic_quotes_runtime，set_magic_quotes_runtime(1) 表示开启，
set_magic_quotes_runtime(0) 则表示关闭。当set_magic_quotes_runtime(1)时，从数据库或通过fread之类的函数读取的文本，将自动对' "和\自动
加上反斜杠\进行转义，防止溢出。这在对数据库的数据进行转移的时候非常有用。但在一般情况下，应当将其关闭，否则从数据库读取出来的数据单引
号、双引号和反斜杠都会被加上\，导致显示不正常。像Discuz，PHPWind都在公共文件的头部加上一句 set_magic_quotes_runtime(0); 强制关闭 
magic_quotes_runtime 。</p>




<p>magic_quotes_gpc 和 magic_quotes_runtime 的区别在于，magic_quotes_gpc 是对通过GET、POST、COOKIE传递的数据进行转义，一般在数据入库前
要先进行转义，magic_quotes_gpc不能在代码中动态开启或关 闭，需要到php.ini将magic_quotes_gpc设置为on或off，代码中可以用get_magic_quotes_gpc
获取 magic_quotes_gpc的状态。当magic_quotes_gpc为off时，需要手工对数据进行addslashes，代码如下：</p>


<!--more-->


<p>{% codeblock %}
if (!get_magic_quotes_gpc()) {</p>

<pre><code> add_slashes($_GET);
 add_slashes($_POST);
 add_slashes($_COOKIE);
</code></pre>

<p>}</p>

<p>function add_slashes($string) {</p>

<pre><code> if (is_array($string)) {    
     foreach ($string as $key =&gt; $value) {    
         $string[$key] = add_slashes($value);    
     }    
 } else {    
     $string = addslashes($string);    
 }    
 return $string;    
</code></pre>

<p>}<br/>
{% endcodeblock %}</p>

<p>php防注入函数,字符过滤函数</p>


<p>{% codeblock %}
//解码
function htmldecode($str)
{</p>

<pre><code>if(empty($str)) return;
if($str=="") return $str;
$str=str_replace("sel&amp;#101;ct","select",$str);
$str=str_replace("jo&amp;#105;n","join",$str);
$str=str_replace("un&amp;#105;on","union",$str);
$str=str_replace("wh&amp;#101;re","where",$str);
$str=str_replace("ins&amp;#101;rt","insert",$str);
$str=str_replace("del&amp;#101;te","delete",$str);
$str=str_replace("up&amp;#100;ate","update",$str);
$str=str_replace("lik&amp;#101;","like",$str);
$str=str_replace("dro&amp;#112;","drop",$str);
$str=str_replace("cr&amp;#101;ate","create",$str);
$str=str_replace("mod&amp;#105;fy","modify",$str);
$str=str_replace("ren&amp;#097;me","rename",$str);
$str=str_replace("alt&amp;#101;r","alter",$str);
$str=str_replace("ca&amp;#115;","cast",$str);
$str=str_replace("&amp;amp;","&amp;",$str);
$str=str_replace("&amp;gt;","&gt;",$str);
$str=str_replace("&amp;lt;","&lt;",$str);
$str=str_replace("&amp;nbsp;",chr(32),$str);
$str=str_replace("&amp;nbsp;",chr(9),$str);
//$str=str_replace("&amp;#160;&amp;#160;&amp;#160;&amp;#160;",chr(9),$str);
$str=str_replace("&amp;",chr(34),$str);
$str=str_replace("&amp;#39;",chr(39),$str);
$str=str_replace("&lt;br /&gt;",chr(13),$str);
$str=str_replace("''","'",$str);
return $str;
</code></pre>

<p>}
//编码
function htmlencode($str)
{</p>

<pre><code>if(empty($str)) return;
if($str=="") return $str;
$str=trim($str);
$str=str_replace("&amp;","&amp;amp;",$str);
$str=str_replace("&gt;","&amp;gt;",$str);
$str=str_replace("&lt;","&amp;lt;",$str);
$str=str_replace(chr(32),"&amp;nbsp;",$str);
$str=str_replace(chr(9),"&amp;nbsp;",$str);
//$str=str_replace(chr(9),"&amp;#160;&amp;#160;&amp;#160;&amp;#160;",$str);
$str=str_replace(chr(34),"&amp;",$str);
$str=str_replace(chr(39),"&amp;#39;",$str);
$str=str_replace(chr(13),"&lt;br /&gt;",$str);
$str=str_replace("'","''",$str);
$str=str_replace("select","sel&amp;#101;ct",$str);
$str=str_replace("join","jo&amp;#105;n",$str);
$str=str_replace("union","un&amp;#105;on",$str);
$str=str_replace("where","wh&amp;#101;re",$str);
$str=str_replace("insert","ins&amp;#101;rt",$str);
$str=str_replace("delete","del&amp;#101;te",$str);
$str=str_replace("update","up&amp;#100;ate",$str);
$str=str_replace("like","lik&amp;#101;",$str);
$str=str_replace("drop","dro&amp;#112;",$str);
$str=str_replace("create","cr&amp;#101;ate",$str);
$str=str_replace("modify","mod&amp;#105;fy",$str);
$str=str_replace("rename","ren&amp;#097;me",$str);
$str=str_replace("alter","alt&amp;#101;r",$str);
$str=str_replace("cast","ca&amp;#115;",$str);
return $str;
</code></pre>

<p>}
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[超好的HTML解析工具PHP Simple HTML DOM Parser]]></title>
    <link href="http://ibillxia.github.io/blog/2010/08/28/a-php-html-parser-PHPSimpleHTMLDOMParser/"/>
    <updated>2010-08-28T20:49:00+08:00</updated>
    <id>http://ibillxia.github.io/blog/2010/08/28/a-php-html-parser-PHPSimpleHTMLDOMParser</id>
    <content type="html"><![CDATA[<p>采用PHP5+ 开发的一个简单的 PHP HTML DOM 分析，支持 invalid HTML 并提供非常简单的方式来操作 HTML 元素。在 HMTL 页面
上查找标签所使用的语法与 jQuery （一个轻量级，实用的 javascript 框架） 相似，从页面中抽取内容只需要一行代码。开源代码：
<a href="http://sourceforge.net/projects/simplehtmldom/">http://sourceforge.net/projects/simplehtmldom/</a> </p>




<p>它具有以下几个特点：</br>
1. 只支援 PHP5 以上. </br>
2. 可以分析不严谨 (invalid) 的 HTML. </br>
3. 支援简单的 CSS Selector. </br>
4. 简单的 DOM 操作. </br>
5. 会维持 HTML 中的原始格式 .</br>
下面是使用手册上举的几个简单的使用示例。</p>


<!--more-->


<p>如何读取 HTML 元素 </p>


<p>{% codeblock %}
&lt;?
include('html_dom_parser.php');
$dom = file_get_dom('http://www.google.com/');
// 找出所有网页连结
$result = $dom->find('a');
foreach($result as $v) {echo $v->href . '<br>';}
// 找出所有网页图片
$result = $dom->find('img');
foreach($result as $v) {echo $v->src . '<br>';}
// 找出所有网页中所有 id=gbar 的 div 标签
$result = $dom->find('div#gbar');
foreach($result as $v) {echo $v->innertext . '<br>';}
// 找出所有网页中所有 calss=gb1 的 span 标签
$result = $dom->find('span.gb1');
foreach($result as $v) {echo $v->outertext . '<br>';}
// 找出所有网页中所有 align=center 的 'td 标签
$result = $dom->find('td[align=center]');
foreach($result as $v) {echo $v->outertext . '<br>';}
?>
{% endcodeblock %}</p>

<p>如何修改 HTML 元素 </p>


<p>{% codeblock %}
&lt;?
include('html_dom_parser.php');
$dom = file_get_dom('http://www.google.com/');
// 移除网页中所有图片
$ret = $dom->find('img');
foreach($ret as $v) {$v->outertext = '';}
// 修改网页中所有 input 标签
$ret = $dom->find('input');
foreach($ret as $v) {$v->outertext = '[INPUT]';}
// 显示修改后的网页
echo $dom->save();
?>
{% endcodeblock %}</p>

<p>Slashdot网站内容抓取</p>


<p>{% codeblock %}
// Create DOM from URL
$html = file_get_html('http://slashdot.org/');
// Find all article blocks
foreach($html->find('div.article') as $article) {</p>

<pre><code>$item['title']     = $article-&gt;find('div.title', 0)-&gt;plaintext;
$item['intro']    = $article-&gt;find('div.intro', 0)-&gt;plaintext;
$item['details'] = $article-&gt;find('div.details', 0)-&gt;plaintext;
$articles[] = $item;
</code></pre>

<p>}
print_r($articles);
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP格式化打印数组，调试有用]]></title>
    <link href="http://ibillxia.github.io/blog/2010/08/25/php-print-in-format-very-useful-in-debuging/"/>
    <updated>2010-08-25T10:08:00+08:00</updated>
    <id>http://ibillxia.github.io/blog/2010/08/25/php-print-in-format-very-useful-in-debuging</id>
    <content type="html"><![CDATA[<p>以下是从FleaPHP上挖来的，感谢FleaPHP的开发者们。</p>


<p>{% codeblock %}
/<em>*
* 输出变量的内容，通常用于调试
*
* @package Core
*
* @param mixed $vars 要输出的变量
* @param string $label
* @param boolean $return
</em>/
function dump($vars, $label = '', $return = false)
{</p>

<pre><code>if (ini_get('html_errors')) {
    $content = "&lt;pre&gt;\n";
    if ($label != '') {
        $content .= "&lt;strong&gt;{$label} :&lt;/strong&gt;\n";
    }
    $content .= htmlspecialchars(print_r($vars, true));
    $content .= "\n&lt;/pre&gt;\n";
} else {
    $content = $label . " :\n" . print_r($vars, true);
}
if ($return) { return $content; }
echo $content;
return null;
</code></pre>

<p>}
{% endcodeblock %}</p>

<!--more-->


<p>所以只要在自己的代码脚本所有函数外面，ctrl+c/ctrl+v上面这段代码，就可以有dump()函数格式化打印数组了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP采集利器snoopy应用详解]]></title>
    <link href="http://ibillxia.github.io/blog/2010/08/10/php-connecting-tool-snoopy-introduction-and-application/"/>
    <updated>2010-08-10T19:34:00+08:00</updated>
    <id>http://ibillxia.github.io/blog/2010/08/10/php-connecting-tool-snoopy-introduction-and-application</id>
    <content type="html"><![CDATA[<p>Snoopy是一个php类，用来模拟浏览器的功能，可以获取网页内容，发送表单。Snoopy正确运行需要你的服务器的PHP版本在4以上，
并且支持PCRE（Perl Compatible Regular Expressions），基本的LAMP服务都支持。</p>




<h2>一、Snoopy的一些特点</h2>


<p>1.抓取网页的内容 fetch</br>
2.抓取网页的文本内容 (去除HTML标签) fetchtext</br>
3.抓取网页的链接，表单 fetchlinks fetchform</br>
4.支持代理主机</br>
5.支持基本的用户名/密码验证</br>
6.支持设置user_agent, referer(来路), cookies和header content(头文件)</br>
7.支持浏览器重定向，并能控制重定向深度</br>
8.能把网页中的链接扩展成高质量的url(默认)</br>
9.提交数据并且获取返回值</br>
10.支持跟踪HTML框架</br>
11.支持重定向的时候传递cookies，要求php4以上就可以了，由于本身是php一个类，无需扩支持，服务器不支持curl时候的最好选择</p>


<!--more-->


<h2>二、类方法</h2>


<p>fetch(\$URI) </br>
这是为了抓取网页的内容而使用的方法。\$URI参数是被抓取网页的URL地址。抓取的结果被存储在 \$this->results 中。
如果你正在抓取的是一个框架，Snoopy将会将每个框架追踪后存入数组中，然后存入 \$this->results。</br></br>

fetchtext(\$URI) </br>
本方法类似于fetch()，唯一不同的就是本方法会去除HTML标签和其他的无关数据，只返回网页中的文字内容。</br></br>

fetchform(\$URI) </br>
本方法类似于fetch()，唯一不同的就是本方法会去除HTML标签和其他的无关数据，只返回网页中表单内容(form)。</br></br>

fetchlinks(\$URI) 
本方法类似于fetch()，唯一不同的就是本方法会去除HTML标签和其他的无关数据，只返回网页中链接(link)。 
默认情况下，相对链接将自动补全，转换成完整的URL。</br></br>

submit(\$URI,\$formvars) </br>
本方法向\$URL指定的链接地址发送确认表单。\$formvars是一个存储表单参数的数组。</br></br>

submittext(\$URI,\$formvars) </br>
本方法类似于submit()，唯一不同的就是本方法会去除HTML标签和其他的无关数据，只返回登陆后网页中的文字内容。</br></br>

submitlinks(\$URI) </br>
本方法类似于submit()，唯一不同的就是本方法会去除HTML标签和其他的无关数据，只返回网页中链接(link)。 
默认情况下，相对链接将自动补全，转换成完整的URL。</p>




<h2>三、类属性(缺省值在括号里)</h2>


<p>\$host 连接的主机 </br>
\$port 连接的端口 </br>
\$proxy_host 使用的代理主机，如果有的话 </br>
\$proxy_port 使用的代理主机端口，如果有的话 </br>
\$agent 用户代理伪装 (Snoopy v0.1) </br>
\$referer 来路信息，如果有的话 </br>
\$cookies cookies， 如果有的话 </br>
\$rawheaders 其他的头信息, 如果有的话 </br>
\$maxredirs 最大重定向次数， 0=不允许 (5) </br>
\$offsiteok whether or not to allow redirects off-site. (true) </br>
\$expandlinks 是否将链接都补全为完整地址 (true) </br>
\$user 认证用户名, 如果有的话 </br>
\$pass 认证用户名, 如果有的话 </br>
\$accept http 接受类型 (image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*) </br>
\$error 哪里报错, 如果有的话 </br>
\$response_code 从服务器返回的响应代码 </br>
\$headers 从服务器返回的头信息 </br>
\$maxlength 最长返回数据长度 </br>
\$read_timeout 读取操作超时 (requires PHP 4 Beta 4+) 设置为0为没有超时 </br>
\$timed_out 如果一次读取操作超时了，本属性返回 true (requires PHP 4 Beta 4+) </br>
\$maxframes 允许追踪的框架最大数量 </br>
\$status 抓取的http的状态 </br>
\$temp_dir 网页服务器能够写入的临时文件目录 (/tmp) </br>
\$curl_path cURL binary 的目录, 如果没有cURL binary就设置为 false</p>




<h2>四、以下是demo</h2>


<p>Demo 1：抓取百度首页示例</p>


<p>{% codeblock %}
&lt;?
include "Snoopy.class.php";
$snoopy = new Snoopy;
$snoopy->proxy_host = "www.baidu.com";
$snoopy->proxy_port = "8080";
$snoopy->agent = "(compatible; MSIE 4.01; MSN 2.5; AOL 4.0; Windows 98)";
$snoopy->referer = "http://www.baidu.com/";
$snoopy->cookies["SessionID"] = 238472834723489l;
$snoopy->cookies["favoriteColor"] = "RED";
$snoopy->rawheaders["Pragma"] = "no-cache";
$snoopy->maxredirs = 2;
$snoopy->offsiteok = false;
$snoopy->expandlinks = false;
$snoopy->user = "joe";
$snoopy->pass = "bloe";
if($snoopy->fetchtext("http://www.baidu.com"))
{
echo " <PRE>".htmlspecialchars($snoopy->results)." </PRE>\n"; <BR>
} <BR>
else <BR>
echo "error fetching document: ".$snoopy->error."\n";
?>
{% endcodeblock %}</p>

<p>Demo 2: snoopy登录并采集phpchina示例 </p>


<p>{% codeblock %}
&lt;?php
//采集phpchina
set_time_limit(0);
require_once("Snoopy.class.php");
$snoopy=new Snoopy();
//登陆论坛
$submit_url = "http://www.phpchina.com/bbs/logging.php?action=login";
$submit_vars["loginmode"] = "normal";
$submit_vars["styleid"] = "1";
$submit_vars["cookietime"] = "315360000";
$submit_vars["loginfield"] = "username";
$submit_vars["username"] = "<strong><em>"; //你的用户名
$submit_vars["password"] = "</em></strong>**"; //你的密码
$submit_vars["questionid"] = "0";
$submit_vars["answer"] = "";
$submit_vars["loginsubmit"] = "提 交";
$snoopy->submit($submit_url,$submit_vars);</p>

<p>if ($snoopy->results)
{</p>

<pre><code>//获取连接地址 
$snoopy-&gt;fetchlinks("http://www.phpchina.com/bbs"); 
$url=array(); 
$url=$snoopy-&gt;results; 
//print_r($url); 
foreach ($url as $key=&gt;$value) 
{ 
    //匹配http://www.phpchina.com/bbs/forumdisplay.php?fid=156&amp;sid=VfcqTR地址即论坛板块地址 
    if (!preg_match("/^(http:\/\/www\.phpchina\.com\/bbs\/forumdisplay\.php\?fid=)[0-9]*&amp;sid=[a-zA-Z]{6}/i",$value)) 
    { 
        unset($url[$key]); 
    } 
} 
//print_r($url); 
//获取到板块数组$url，循环访问，此处获取第一个模块第一页的数据 
$i=0; 
foreach ($url as $key=&gt;$value) 
{ 
    if ($i&gt;=1) 
    { 
        //测试限制 
        break; 
    } 
    else 
    { 
        //访问该模块，提取帖子的连接地址，正式访问里需要提取帖子分页的数据，然后根据分页数据提取帖子数据 
        $snoopy=new Snoopy(); 
        $snoopy-&gt;fetchlinks($value); 
        $tie=array(); 
        $tie[$i]=$snoopy-&gt;results; 
        //print_r($tie); 
        //转换数组 
        foreach ($tie[$i] as $key=&gt;$value) 
        { 
            //匹配http://www.phpchina.com/bbs/viewthread.php?tid=68127&amp;amp; extra=page%3D1&amp;amp;page=1&amp;sid=iBLZfK 
            if (!preg_match("/^(http:\/\/www\.phpchina\.com\/bbs\/viewthread\.php\?tid=)[0-9]*&amp;amp;extra=page\%3D1&amp;amp;page=[0-9]*&amp;sid=[a-zA-Z]{6}/i",$value)) 
            { 
                unset($tie[$i][$key]); 
            } 
        } 
        //print_r($tie[$i]); 
        //归类数组，将同一个帖子不同页面的内容放一个数组里 
        $left='';//连接左边公用地址 
        $j=0; 
        $page=array(); 
        foreach ($tie[$i] as $key=&gt;$value) 
        { 
            $left=substr($value,0,52); 
            $m=0; 
            foreach ($tie[$i] as $pkey=&gt;$pvalue) 
            { 
                //重组数组 
                if (substr($pvalue,0,52)==$left) 
                { 
                    $page[$j][$m]=$pvalue; 
                    $m++; 
                } 
            } 
            $j++; 
        } 
        //去除重复项开始 
        //$page=array_unique($page);只能用于一维数组 
        $paget[0]=$page[0]; 
        $nums=count($page); 
        for ($n=1;$n &lt;$nums;$n++) 
        { 
            $paget[$n]=array_diff($page[$n],$page[$n-1]); 
        } 
        //去除多维数组重复值结束 
        //去除数组空值 
        unset($page); 
        $page=array();//重新定义page数组 
        $page=array_filter($paget); 
        //print_r($page); 
        $u=0; 
        $title=array(); 
        $content=array(); 
        $temp=''; 
        $tt=array(); 
        foreach ($page as $key=&gt;$value) 
        { 
            //外围循环，针对一个帖子 
            if (is_array($value)) 
            { 
                foreach ($value as $k1=&gt;$v1) 
                { 
                    //页内循环，针对一个帖子的N页 
                    $snoopy=new Snoopy(); 
                    $snoopy-&gt;fetch($v1); 
                    $temp=$snoopy-&gt;results; 
                    //读取标题 
                    if (!preg_match_all("/ &lt;h2&gt;(.*) &lt;\/h2&gt;/i",$temp,$tt)) 
                    { 
                        echo "no title"; 
                        exit; 
                    } 
                    else 
                    { 
                        $title[$u]=$tt[1][1]; 
                    } 
                    unset($tt); 
                    //读取内容 
                    if (!preg_match_all("/ &lt;div id=\"postmessage_[0-9]{1,8}\" class=\"t_msgfont\"&gt;(.*) &lt;\/div&gt;/i",$temp,$tt)) 
                    { 
                        print_r($tt); 
                        echo "no content1"; 
                        exit; 
                    } 
                    else 
                    { 
                        foreach ($tt[1] as $c=&gt;$c2) 
                        { 
                            $content[$u].=$c2; 
                        } 
                    } 
                } 
            } 
            else 
            { 
                //直接取页内容 
                $snoopy=new Snoopy(); 
                $snoopy-&gt;fetch($value); 
                $temp=$snoopy-&gt;results; 
                //读取标题 
                if (!preg_match_all("/ &lt;h2&gt;(.*) &lt;\/h2&gt;/i",$temp,$tt)) 
                { 
                    echo "no title"; 
                    exit; 
                } 
                else 
                { 
                    $title[$u]=$tt[1][1]; 
                } 
                unset($tt); 
                //读取内容 
                if (!preg_match_all("/ &lt;div id=\"postmessage_[0-9]*\" class=\"t_msgfont\"&gt;(.*) &lt;\/div&gt;/i",$temp,$tt)) 
                { 
                    echo "no content2"; 
                    exit; 
                } 
                else 
                { 
                    foreach ($tt[1] as $c=&gt;$c2) 
                    { 
                        $content[$u].=$c2; 
                    } 
                } 
            } 
            $u++; 
        } 
        print_r($content); 
    } 
    $i++; 
} 
</code></pre>

<p>}
else
{</p>

<pre><code>echo "login failed"; 
exit; 
</code></pre>

<p>}
?>
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP函数call_user_func和call_user_func_array详解]]></title>
    <link href="http://ibillxia.github.io/blog/2010/08/04/explain-php-function-call_user_func-and-call_user_func_array-in-detail/"/>
    <updated>2010-08-04T21:38:00+08:00</updated>
    <id>http://ibillxia.github.io/blog/2010/08/04/explain-php-function-call_user_func-and-call_user_func_array-in-detail</id>
    <content type="html"><![CDATA[<p>call_user_func函数类似于一种特别的调用函数的方法，使用方法如下：</p>


<p>{% codeblock %}
function a($b,$c)
{</p>

<pre><code>echo $b;
echo $c;
</code></pre>

<p>}
call_user_func('a', "111","222");
call_user_func('a', "333","444");
//显示 111 222 333 444
{% endcodeblock %}</p>

<!--more-->


<p>调用类内部的方法比较奇怪，居然用的是array，不知道开发者是如何考虑的，当然省去了new，也是满有新意的:</p>


<p>{% codeblock %}
class a {</p>

<pre><code>function b($c) 
{
    echo $c;
}
</code></pre>

<p>}
call_user_func(array("a", "b"),"111");
//显示 111
{% endcodeblock %}</p>

<p>call_user_func_array函数和call_user_func很相似，只不过是换了一种方式传递了参数，让参数的结构更清晰:</p>


<p>{% codeblock %}
unction a($b, $c)
{</p>

<pre><code>echo $b;
echo $c;
</code></pre>

<p>}
call_user_func_array('a', array("111", "222"));
//显示 111 222
{% endcodeblock %}</p>

<p>call_user_func_array函数也可以调用类内部的方法的</p>


<p>{% codeblock %}
Class ClassA {</p>

<pre><code>function bc($b, $c) {
    $bc = $b + $c;
    echo $bc;
}
</code></pre>

<p>}
call_user_func_array(array('ClassA','bc'), array("111", "222"));
//显示 333
{% endcodeblock %}</p>

<p>call_user_func函数和call_user_func_array函数都支持引用，这让他们和普通的函数调用更趋于功能一致:</p>


<p>{% codeblock %}
function a(&amp;$b)
{</p>

<pre><code>$b++;
</code></pre>

<p>}
$c = 0;
call_user_func('a', &amp;$c);
echo $c;//显示 1
call_user_func_array('a', array(&amp;$c));
echo $c;//显示 2
{% endcodeblock %}</p>

<p>一个可以用于调试输出的例子：</p>


<p>{% codeblock %}
function debug($var, $val)
{</p>

<pre><code>echo "***DEBUGGING\nVARIABLE: $var\nVALUE:";
if (is_array($val) || is_object($val) || is_resource($val)) {
    print_r($val);
} else {
    echo "\n$val\n";
}
echo "***\n";
</code></pre>

<p>}</p>

<p>$c = mysql_connect();
$host = $_SERVER["SERVER_NAME"];</p>

<p>call_user_func_array('debug', array("host", $host));
call_user_func_array('debug', array("c", $c));
call_user_func_array('debug', array("<em>POST", $</em>POST));
{% endcodeblock %}</p>

<p>另外，如果和伪重载结合，还可以这样用：</p>


<p>{% codeblock %}
function otest1 ($a)
{</p>

<pre><code>echo( '一个参数' );
</code></pre>

<p>}</p>

<p>function otest2 ( $a, $b)
{</p>

<pre><code>echo( '二个参数' );
</code></pre>

<p>}</p>

<p>function otest3 ( $a ,$b,$c)
{</p>

<pre><code>echo( '三个啦' );
</code></pre>

<p>}</p>

<p>function otest ()
{</p>

<pre><code>$args = func_get_args();
$num = func_num_args();
call_user_func_array( 'otest'.$num, $args );
</code></pre>

<p>}</p>

<p>otest(1,2);  //调用第一个函数，输出：一个参数
{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>